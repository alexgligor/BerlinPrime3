@page "/userconfig"
@using BerlinUI4.HelpClasses
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject IGenericService<User> serviceUser
@inject IGenericService<Site> serviceSite
@using System.IO
@inject IWebHostEnvironment Environment

<h1>Configurare utilizatori</h1>


@{
    var i = 0;
}
@foreach (var usernode in UserNodes)
{
    i++;
    var panelsStayOpen = "panelsStayOpen-collapseOne" + i;

    <div class="accordion-item">
        <h2 class="accordion-header">
            <button @onclick="()=>NodeClick(usernode)" class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#@panelsStayOpen" aria-expanded="true" aria-controls="@panelsStayOpen">
                @usernode.Item.Title
            </button>
        </h2>
        <div id="@panelsStayOpen" class="@(usernode.isOpen ? "accordion-collapse collapse show" : "accordion-collapse collapse")">
            <div class="accordion-body">
                <div class="card mb-3" style="max-width: auto;">
                    <div class="row no-gutters">
                        <div class="col-md-4">
                            @{
                                var imgUrl = string.IsNullOrEmpty(usernode.Item.ImageUrl) ? "https://github.com/mdo.png" : usernode.Item.ImageUrl;
                            }
                            <img src="@imgUrl" class="card-img" alt="@imgUrl">
                            <label class="btn btn-link">
                                Incarca
                                <InputFile OnChange="e => LoadFiles(e, usernode)" multiple style="display:none;" />
                            </label>
                        </div>
                        <div class="col-md-8">
                            <div class="card-body">
                                <EditForm Model="@usernode.Item" >
                                    <DataAnnotationsValidator />

                                    <div class="form-group p-2">
                                        <label for="title">Nume:</label>
                                        <InputText id="title" class="form-control" @bind-Value="usernode.Item.Title" />
                                        <ValidationMessage For="@(() => usernode.Item.Title)" class="text-danger" />
                                        <label for="description">Descriere:</label>
                                        <InputText id="description" class="form-control" @bind-Value="usernode.Item.Description" />
                                        <label for="target">Target:</label>
                                        <InputNumber id="target" class="form-control" @bind-Value="usernode.Item.Target" />
                                        <label for="isDeleted">Sterge:</label>
                                        <InputCheckbox id="isDeleted" @bind-Value="usernode.Item.IsDeleted" />
                                    </div>
                                    <button type="submit" class="btn btn-info" @onclick="()=>HandleValidSubmit(usernode)">Salvează</button>
                                </EditForm>
                                <p class="card-text"><small class="text-muted">Ultima modificare @usernode.Item.UpdateDate.ToString()</small></p>
                                                    
                                                  
                                <div class="input-group-text d-block">
                                    @foreach(var site in Sites)
                                    {
                                        if (usernode.Item.Sites.Where(a => a.SiteId == site.Id).Count() > 0)
                                        {
                                            <input class="m-2" type="checkbox" checked @onchange="()=>CheckLocation(true, usernode.Item, site)">
                                        }
                                        else
                                        {
                                            <input class="m-2" type="checkbox"   @onchange="()=>CheckLocation(false, usernode.Item, site)">

                                        }

                                        @site.Title
                                    }
                                                                 
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
                   
}

<div class="accordion-item">
    <h2 class="accordion-header">
        <button class="accordion-button bg-info" type="button" data-bs-toggle="collapse" data-bs-target="#newuser" aria-expanded="true" aria-controls="newuser">
            Adauga un nou utilizator
        </button>
    </h2>
    <div id="newuser" class="@(newUserNode.isOpen ? "accordion-collapse collapse show" : "accordion-collapse collapse")">
        <div class="accordion-body">
            <div class="card mb-3" style="max-width: auto;">
                <div class="row no-gutters">
                    <div class="col-md-8">
                        <div class="card-body">
                            <EditForm Model="@newUserNode.Item">
                                <DataAnnotationsValidator />

                                <div class="form-group p-2">
                                    <label for="title">Nume:</label>
                                    <InputText id="title" class="form-control" @bind-Value="newUserNode.Item.Title" />
                                    <ValidationMessage For="@(() => newUserNode.Item.Title)" class="text-danger" />
                                    <label for="description">Descriere:</label>
                                    <InputText id="description" class="form-control" @bind-Value="newUserNode.Item.Description" />
                                </div>

                                <button type="submit" class="btn btn-info" @onclick="()=>HandleNewUserSubmit(newUserNode.Item)">Salvează</button>
                            </EditForm>
                            <p class="card-text"><small class="text-muted">Ultima modificare @newUserNode.Item.UpdateDate.ToString()</small></p>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private List<ConfiguratorNode<User>> UserNodes = new List<ConfiguratorNode<User>>();
    private ConfiguratorNode<User> newUserNode = new ConfiguratorNode<User>(new User());

    private List<Site> Sites { get; set; } = new();

    private async Task HandleValidSubmit(ConfiguratorNode<User> cuser)
    {
        await serviceUser.Update(cuser.Item);

        StateHasChanged();
    }

    private async Task HandleNewUserSubmit(User user)
    {
        await serviceUser.Add(user);
        newUserNode = new ConfiguratorNode<User>(new User());
        UserNodes.Add(new ConfiguratorNode<User>(user));
        StateHasChanged();
    }

    private async Task CheckLocation(bool currentState, User user, Site site)
    {
        if (currentState)
        {
            var sitef = user.Sites.First(s => s.SiteId == site.Id);
            user.Sites.Remove(sitef);
        }
        else
        {
            user.Sites.Add(new SiteUser() { Site = site });
        }

        await serviceUser.Update(user);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var users = await serviceUser.GetAll(u=>u.Sites);
        Sites =  await serviceSite.GetAll();
        foreach (var u in users)
            UserNodes.Add(new ConfiguratorNode<User>(u));
    }

    private void NodeClick(ConfiguratorNode<User> userNode)
    {
        userNode.isOpen = !userNode.isOpen;
        if(!userNode.isOpen)
            Thread.Sleep(400);

        StateHasChanged();
    }


    private async void LoadFiles(InputFileChangeEventArgs e, ConfiguratorNode<User> userNode)
    {
        var file = e.File;
        if (file != null)
        {
            userNode.Item.ImageUrl = await ImageHelper.SaveUserImg(file, Environment.WebRootPath);
            await serviceUser.Update(userNode.Item);
            StateHasChanged();
        }
    }
}
   